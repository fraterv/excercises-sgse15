// 1: Preferred solution, but does not work because the generated key
// gets too long (there is a mail with 800 recipients)
var map = function() {
    var rec = "";
    for (var i = 0; i < this.recipients.length; i++) {
	rec += this.recipients[i]; // create a string representation of all recipients
    }
    var uk = this.sender + rec; // unique key: sender + all recipients
    emit (uk, 1);
}


// 2: accepted solution though not quite correct because we split mails to several
// recipients and not count them as one.
var map = function() {
    var rec = "";
    for (var i = 0; i < this.recipients.length; i++) {
	emit (this.sender + " to " + this.recipients[i], 1);
    }
}

// reduce for the accepted solution. Much easier than in the workaround below, but
// actually incorrect.
var reduce = function(key, values) {
    return Array.sum(values);
}

// Usage of accepted solution:
// db.output.drop()
// db.mails.mapReduce(map, reduce, { query: {}, out : "output" })
// db.output.find().sort({"value" : - 1})

// 3: Original, but workaround because of issue with long keys described above

var map = function() {
    emit (this.sender, this.recipients);
}

// Map above creates a document for each sender, e.g.
// { "Rosalie@enron" : [ recipient-list1, recipient-list2, ...] }
// where each recipient-list is either an array of recipients

// reduce is then called for every unique sender,
// *which has more then one entry in the list* (todo)
// (see http://docs.mongodb.org/manual/reference/command/mapReduce/#mapreduce-map-cmd)

var reduce = function(key, values) {
    var recipients = {};

    values.forEach (function(recipient) {
        if (!recipient.length) { // mass mail? Some recipients are '[]'
            recipient = "BROADCAST";
        }
        if (!recipients[recipient]) {
            recipients[recipient] = 1;
        }
	else {
            recipients[recipient] += 1;
        }
    });

    return recipients;
}

// Don't know how to sort...
// run like this:
// db.output.drop()
// db.runCommand({mapReduce: "mails", map: map, reduce: reduce, out: "output", query: {}})
// or
// db.mails.mapReduce(map, reduce, { query: {}, out : "output" })
// db.output.find()

// Here's a way to sort! But the result is not a collection now...

var sortIt = function(obj1, obj2) {
    var getMax = function(obj) {
        var max = null;
	for (var p in obj) {
	    if (!max || obj[p] > obj[max]) {
	       max = p;
            }
        }
        return obj[max];
    }
    return getMax(obj1["value"]) < getMax(obj2["value"])? -1 : 1;
}

// Use it like this:
// var result = db.mails.mapReduce(map, reduce, { query: {}, out : { inline : 1 }})
// result.results.sort(sortIt)
